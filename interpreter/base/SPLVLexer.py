# Generated from d:/Desktop/tkik_new/simple_programming_language_visualiser/simple_programming_language_visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,257,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,4,0,81,8,0,11,0,12,0,82,1,0,1,0,1,1,1,1,1,1,1,1,5,1,91,8,1,10,
        1,12,1,94,9,1,1,1,1,1,1,2,3,2,99,8,2,1,2,1,2,5,2,103,8,2,10,2,12,
        2,106,9,2,1,2,3,2,109,8,2,1,3,1,3,1,3,4,3,114,8,3,11,3,12,3,115,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,127,8,4,1,5,1,5,1,5,5,5,
        132,8,5,10,5,12,5,135,9,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,158,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,168,8,11,1,12,
        1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,5,28,232,8,28,10,28,
        12,28,235,9,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,0,0,39,1,
        1,3,2,5,3,7,4,9,5,11,6,13,0,15,0,17,7,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,
        51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,
        73,35,75,36,77,37,1,0,10,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,
        0,49,57,1,0,48,57,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,
        114,116,116,3,0,0,31,34,34,92,92,2,0,43,43,45,45,3,0,37,37,42,42,
        47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,271,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,1,80,1,0,0,0,3,86,1,0,0,0,5,108,1,0,0,0,7,110,
        1,0,0,0,9,126,1,0,0,0,11,128,1,0,0,0,13,138,1,0,0,0,15,141,1,0,0,
        0,17,143,1,0,0,0,19,145,1,0,0,0,21,157,1,0,0,0,23,167,1,0,0,0,25,
        169,1,0,0,0,27,173,1,0,0,0,29,175,1,0,0,0,31,178,1,0,0,0,33,181,
        1,0,0,0,35,185,1,0,0,0,37,189,1,0,0,0,39,193,1,0,0,0,41,197,1,0,
        0,0,43,201,1,0,0,0,45,205,1,0,0,0,47,209,1,0,0,0,49,213,1,0,0,0,
        51,217,1,0,0,0,53,221,1,0,0,0,55,225,1,0,0,0,57,229,1,0,0,0,59,236,
        1,0,0,0,61,238,1,0,0,0,63,240,1,0,0,0,65,242,1,0,0,0,67,245,1,0,
        0,0,69,247,1,0,0,0,71,249,1,0,0,0,73,251,1,0,0,0,75,253,1,0,0,0,
        77,255,1,0,0,0,79,81,7,0,0,0,80,79,1,0,0,0,81,82,1,0,0,0,82,80,1,
        0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,85,6,0,0,0,85,2,1,0,0,0,86,
        87,5,47,0,0,87,88,5,47,0,0,88,92,1,0,0,0,89,91,8,1,0,0,90,89,1,0,
        0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,
        1,0,0,0,95,96,6,1,1,0,96,4,1,0,0,0,97,99,5,45,0,0,98,97,1,0,0,0,
        98,99,1,0,0,0,99,100,1,0,0,0,100,104,7,2,0,0,101,103,7,3,0,0,102,
        101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,
        109,1,0,0,0,106,104,1,0,0,0,107,109,5,48,0,0,108,98,1,0,0,0,108,
        107,1,0,0,0,109,6,1,0,0,0,110,111,3,5,2,0,111,113,5,46,0,0,112,114,
        7,3,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,
        1,0,0,0,116,8,1,0,0,0,117,118,5,116,0,0,118,119,5,114,0,0,119,120,
        5,117,0,0,120,127,5,101,0,0,121,122,5,102,0,0,122,123,5,97,0,0,123,
        124,5,108,0,0,124,125,5,115,0,0,125,127,5,101,0,0,126,117,1,0,0,
        0,126,121,1,0,0,0,127,10,1,0,0,0,128,133,5,34,0,0,129,132,3,13,6,
        0,130,132,3,15,7,0,131,129,1,0,0,0,131,130,1,0,0,0,132,135,1,0,0,
        0,133,131,1,0,0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,
        0,136,137,5,34,0,0,137,12,1,0,0,0,138,139,5,92,0,0,139,140,7,4,0,
        0,140,14,1,0,0,0,141,142,8,5,0,0,142,16,1,0,0,0,143,144,7,6,0,0,
        144,18,1,0,0,0,145,146,7,7,0,0,146,20,1,0,0,0,147,158,5,62,0,0,148,
        149,5,62,0,0,149,158,5,61,0,0,150,158,5,60,0,0,151,152,5,60,0,0,
        152,158,5,61,0,0,153,154,5,61,0,0,154,158,5,61,0,0,155,156,5,33,
        0,0,156,158,5,61,0,0,157,147,1,0,0,0,157,148,1,0,0,0,157,150,1,0,
        0,0,157,151,1,0,0,0,157,153,1,0,0,0,157,155,1,0,0,0,158,22,1,0,0,
        0,159,160,5,97,0,0,160,161,5,110,0,0,161,168,5,100,0,0,162,163,5,
        111,0,0,163,168,5,114,0,0,164,165,5,120,0,0,165,166,5,111,0,0,166,
        168,5,114,0,0,167,159,1,0,0,0,167,162,1,0,0,0,167,164,1,0,0,0,168,
        24,1,0,0,0,169,170,5,110,0,0,170,171,5,111,0,0,171,172,5,116,0,0,
        172,26,1,0,0,0,173,174,5,61,0,0,174,28,1,0,0,0,175,176,5,105,0,0,
        176,177,5,110,0,0,177,30,1,0,0,0,178,179,5,105,0,0,179,180,5,102,
        0,0,180,32,1,0,0,0,181,182,5,101,0,0,182,183,5,108,0,0,183,184,5,
        115,0,0,184,34,1,0,0,0,185,186,5,108,0,0,186,187,5,111,0,0,187,188,
        5,112,0,0,188,36,1,0,0,0,189,190,5,119,0,0,190,191,5,104,0,0,191,
        192,5,108,0,0,192,38,1,0,0,0,193,194,5,102,0,0,194,195,5,117,0,0,
        195,196,5,110,0,0,196,40,1,0,0,0,197,198,5,114,0,0,198,199,5,101,
        0,0,199,200,5,116,0,0,200,42,1,0,0,0,201,202,5,105,0,0,202,203,5,
        110,0,0,203,204,5,116,0,0,204,44,1,0,0,0,205,206,5,102,0,0,206,207,
        5,108,0,0,207,208,5,111,0,0,208,46,1,0,0,0,209,210,5,115,0,0,210,
        211,5,116,0,0,211,212,5,114,0,0,212,48,1,0,0,0,213,214,5,98,0,0,
        214,215,5,111,0,0,215,216,5,108,0,0,216,50,1,0,0,0,217,218,5,108,
        0,0,218,219,5,115,0,0,219,220,5,116,0,0,220,52,1,0,0,0,221,222,5,
        110,0,0,222,223,5,117,0,0,223,224,5,108,0,0,224,54,1,0,0,0,225,226,
        5,103,0,0,226,227,5,108,0,0,227,228,5,111,0,0,228,56,1,0,0,0,229,
        233,7,8,0,0,230,232,7,9,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,
        231,1,0,0,0,233,234,1,0,0,0,234,58,1,0,0,0,235,233,1,0,0,0,236,237,
        5,59,0,0,237,60,1,0,0,0,238,239,5,58,0,0,239,62,1,0,0,0,240,241,
        5,44,0,0,241,64,1,0,0,0,242,243,5,46,0,0,243,244,5,46,0,0,244,66,
        1,0,0,0,245,246,5,91,0,0,246,68,1,0,0,0,247,248,5,93,0,0,248,70,
        1,0,0,0,249,250,5,123,0,0,250,72,1,0,0,0,251,252,5,125,0,0,252,74,
        1,0,0,0,253,254,5,40,0,0,254,76,1,0,0,0,255,256,5,41,0,0,256,78,
        1,0,0,0,13,0,82,92,98,104,108,115,126,131,133,157,167,233,2,6,0,
        0,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    IntLiteral = 3
    FloatLiteral = 4
    BoolLiteral = 5
    StringLiteral = 6
    AdditiveOperator = 7
    MultiplicativeOperator = 8
    ComparisonOperator = 9
    BooleanOperator = 10
    NOTOperator = 11
    AssignmentOperator = 12
    InOperator = 13
    IfKeyword = 14
    ElseKeyword = 15
    LoopKeyword = 16
    WhileKeyword = 17
    FunctionKeyword = 18
    ReturnKeyword = 19
    IntType = 20
    FloatType = 21
    StringType = 22
    BoolType = 23
    ListType = 24
    VoidType = 25
    GlobalTypeModifier = 26
    Identifier = 27
    Semicolon = 28
    Colon = 29
    Comma = 30
    DoubleDot = 31
    BracketLeft = 32
    BracketRight = 33
    CurlyLeft = 34
    CurlyRight = 35
    ParenLeft = 36
    ParenRight = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'not'", "'='", "'in'", "'if'", "'els'", "'lop'", "'whl'", "'fun'", 
            "'ret'", "'int'", "'flo'", "'str'", "'bol'", "'lst'", "'nul'", 
            "'glo'", "';'", "':'", "','", "'..'", "'['", "']'", "'{'", "'}'", 
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
            "StringLiteral", "AdditiveOperator", "MultiplicativeOperator", 
            "ComparisonOperator", "BooleanOperator", "NOTOperator", "AssignmentOperator", 
            "InOperator", "IfKeyword", "ElseKeyword", "LoopKeyword", "WhileKeyword", 
            "FunctionKeyword", "ReturnKeyword", "IntType", "FloatType", 
            "StringType", "BoolType", "ListType", "VoidType", "GlobalTypeModifier", 
            "Identifier", "Semicolon", "Colon", "Comma", "DoubleDot", "BracketLeft", 
            "BracketRight", "CurlyLeft", "CurlyRight", "ParenLeft", "ParenRight" ]

    ruleNames = [ "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
                  "StringLiteral", "ESC", "SAFECODEPOINT", "AdditiveOperator", 
                  "MultiplicativeOperator", "ComparisonOperator", "BooleanOperator", 
                  "NOTOperator", "AssignmentOperator", "InOperator", "IfKeyword", 
                  "ElseKeyword", "LoopKeyword", "WhileKeyword", "FunctionKeyword", 
                  "ReturnKeyword", "IntType", "FloatType", "StringType", 
                  "BoolType", "ListType", "VoidType", "GlobalTypeModifier", 
                  "Identifier", "Semicolon", "Colon", "Comma", "DoubleDot", 
                  "BracketLeft", "BracketRight", "CurlyLeft", "CurlyRight", 
                  "ParenLeft", "ParenRight" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


