# Generated from d:/Desktop/tkik_new/simple_programming_language_visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,261,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,4,0,83,8,0,11,0,12,0,84,1,0,1,0,1,1,1,1,1,1,1,1,5,1,
        93,8,1,10,1,12,1,96,9,1,1,1,1,1,1,2,3,2,101,8,2,1,2,1,2,5,2,105,
        8,2,10,2,12,2,108,9,2,1,2,3,2,111,8,2,1,3,1,3,1,3,4,3,116,8,3,11,
        3,12,3,117,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,129,8,4,1,5,1,
        5,1,5,5,5,134,8,5,10,5,12,5,137,9,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
        1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        3,10,160,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,170,8,
        11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,5,28,234,8,
        28,10,28,12,28,237,9,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,0,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,0,15,0,17,7,19,8,21,
        9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,
        20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,
        31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,1,0,10,3,0,9,10,13,
        13,32,32,2,0,10,10,13,13,1,0,49,57,1,0,48,57,8,0,34,34,47,47,92,
        92,98,98,102,102,110,110,114,114,116,116,3,0,0,31,34,34,92,92,2,
        0,43,43,45,45,3,0,37,37,42,42,47,47,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,275,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,82,
        1,0,0,0,3,88,1,0,0,0,5,110,1,0,0,0,7,112,1,0,0,0,9,128,1,0,0,0,11,
        130,1,0,0,0,13,140,1,0,0,0,15,143,1,0,0,0,17,145,1,0,0,0,19,147,
        1,0,0,0,21,159,1,0,0,0,23,169,1,0,0,0,25,171,1,0,0,0,27,175,1,0,
        0,0,29,177,1,0,0,0,31,180,1,0,0,0,33,183,1,0,0,0,35,187,1,0,0,0,
        37,191,1,0,0,0,39,195,1,0,0,0,41,199,1,0,0,0,43,203,1,0,0,0,45,207,
        1,0,0,0,47,211,1,0,0,0,49,215,1,0,0,0,51,219,1,0,0,0,53,223,1,0,
        0,0,55,227,1,0,0,0,57,231,1,0,0,0,59,238,1,0,0,0,61,240,1,0,0,0,
        63,242,1,0,0,0,65,244,1,0,0,0,67,247,1,0,0,0,69,249,1,0,0,0,71,251,
        1,0,0,0,73,253,1,0,0,0,75,255,1,0,0,0,77,257,1,0,0,0,79,259,1,0,
        0,0,81,83,7,0,0,0,82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,
        1,0,0,0,85,86,1,0,0,0,86,87,6,0,0,0,87,2,1,0,0,0,88,89,5,47,0,0,
        89,90,5,47,0,0,90,94,1,0,0,0,91,93,8,1,0,0,92,91,1,0,0,0,93,96,1,
        0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,97,
        98,6,1,0,0,98,4,1,0,0,0,99,101,5,45,0,0,100,99,1,0,0,0,100,101,1,
        0,0,0,101,102,1,0,0,0,102,106,7,2,0,0,103,105,7,3,0,0,104,103,1,
        0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,111,1,
        0,0,0,108,106,1,0,0,0,109,111,5,48,0,0,110,100,1,0,0,0,110,109,1,
        0,0,0,111,6,1,0,0,0,112,113,3,5,2,0,113,115,5,46,0,0,114,116,7,3,
        0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,
        0,0,118,8,1,0,0,0,119,120,5,116,0,0,120,121,5,114,0,0,121,122,5,
        117,0,0,122,129,5,101,0,0,123,124,5,102,0,0,124,125,5,97,0,0,125,
        126,5,108,0,0,126,127,5,115,0,0,127,129,5,101,0,0,128,119,1,0,0,
        0,128,123,1,0,0,0,129,10,1,0,0,0,130,135,5,34,0,0,131,134,3,13,6,
        0,132,134,3,15,7,0,133,131,1,0,0,0,133,132,1,0,0,0,134,137,1,0,0,
        0,135,133,1,0,0,0,135,136,1,0,0,0,136,138,1,0,0,0,137,135,1,0,0,
        0,138,139,5,34,0,0,139,12,1,0,0,0,140,141,5,92,0,0,141,142,7,4,0,
        0,142,14,1,0,0,0,143,144,8,5,0,0,144,16,1,0,0,0,145,146,7,6,0,0,
        146,18,1,0,0,0,147,148,7,7,0,0,148,20,1,0,0,0,149,160,5,62,0,0,150,
        151,5,62,0,0,151,160,5,61,0,0,152,160,5,60,0,0,153,154,5,60,0,0,
        154,160,5,61,0,0,155,156,5,61,0,0,156,160,5,61,0,0,157,158,5,33,
        0,0,158,160,5,61,0,0,159,149,1,0,0,0,159,150,1,0,0,0,159,152,1,0,
        0,0,159,153,1,0,0,0,159,155,1,0,0,0,159,157,1,0,0,0,160,22,1,0,0,
        0,161,162,5,97,0,0,162,163,5,110,0,0,163,170,5,100,0,0,164,165,5,
        111,0,0,165,170,5,114,0,0,166,167,5,120,0,0,167,168,5,111,0,0,168,
        170,5,114,0,0,169,161,1,0,0,0,169,164,1,0,0,0,169,166,1,0,0,0,170,
        24,1,0,0,0,171,172,5,110,0,0,172,173,5,111,0,0,173,174,5,116,0,0,
        174,26,1,0,0,0,175,176,5,61,0,0,176,28,1,0,0,0,177,178,5,105,0,0,
        178,179,5,110,0,0,179,30,1,0,0,0,180,181,5,105,0,0,181,182,5,102,
        0,0,182,32,1,0,0,0,183,184,5,101,0,0,184,185,5,108,0,0,185,186,5,
        115,0,0,186,34,1,0,0,0,187,188,5,108,0,0,188,189,5,111,0,0,189,190,
        5,112,0,0,190,36,1,0,0,0,191,192,5,119,0,0,192,193,5,104,0,0,193,
        194,5,108,0,0,194,38,1,0,0,0,195,196,5,102,0,0,196,197,5,117,0,0,
        197,198,5,110,0,0,198,40,1,0,0,0,199,200,5,114,0,0,200,201,5,101,
        0,0,201,202,5,116,0,0,202,42,1,0,0,0,203,204,5,105,0,0,204,205,5,
        110,0,0,205,206,5,116,0,0,206,44,1,0,0,0,207,208,5,102,0,0,208,209,
        5,108,0,0,209,210,5,111,0,0,210,46,1,0,0,0,211,212,5,115,0,0,212,
        213,5,116,0,0,213,214,5,114,0,0,214,48,1,0,0,0,215,216,5,98,0,0,
        216,217,5,111,0,0,217,218,5,108,0,0,218,50,1,0,0,0,219,220,5,108,
        0,0,220,221,5,115,0,0,221,222,5,116,0,0,222,52,1,0,0,0,223,224,5,
        110,0,0,224,225,5,117,0,0,225,226,5,108,0,0,226,54,1,0,0,0,227,228,
        5,103,0,0,228,229,5,108,0,0,229,230,5,111,0,0,230,56,1,0,0,0,231,
        235,7,8,0,0,232,234,7,9,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,
        233,1,0,0,0,235,236,1,0,0,0,236,58,1,0,0,0,237,235,1,0,0,0,238,239,
        5,59,0,0,239,60,1,0,0,0,240,241,5,58,0,0,241,62,1,0,0,0,242,243,
        5,44,0,0,243,64,1,0,0,0,244,245,5,46,0,0,245,246,5,46,0,0,246,66,
        1,0,0,0,247,248,5,91,0,0,248,68,1,0,0,0,249,250,5,93,0,0,250,70,
        1,0,0,0,251,252,5,123,0,0,252,72,1,0,0,0,253,254,5,125,0,0,254,74,
        1,0,0,0,255,256,5,40,0,0,256,76,1,0,0,0,257,258,5,41,0,0,258,78,
        1,0,0,0,259,260,9,0,0,0,260,80,1,0,0,0,13,0,84,94,100,106,110,117,
        128,133,135,159,169,235,1,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    IntLiteral = 3
    FloatLiteral = 4
    BoolLiteral = 5
    StringLiteral = 6
    AdditiveOperator = 7
    MultiplicativeOperator = 8
    ComparisonOperator = 9
    BooleanOperator = 10
    NOTOperator = 11
    AssignmentOperator = 12
    InOperator = 13
    IfKeyword = 14
    ElseKeyword = 15
    LoopKeyword = 16
    WhileKeyword = 17
    FunctionKeyword = 18
    ReturnKeyword = 19
    IntType = 20
    FloatType = 21
    StringType = 22
    BoolType = 23
    ListType = 24
    VoidType = 25
    GlobalTypeModifier = 26
    Identifier = 27
    Semicolon = 28
    Colon = 29
    Comma = 30
    DoubleDot = 31
    BracketLeft = 32
    BracketRight = 33
    CurlyLeft = 34
    CurlyRight = 35
    ParenLeft = 36
    ParenRight = 37
    ERROR_CHAR = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'not'", "'='", "'in'", "'if'", "'els'", "'lop'", "'whl'", "'fun'", 
            "'ret'", "'int'", "'flo'", "'str'", "'bol'", "'lst'", "'nul'", 
            "'glo'", "';'", "':'", "','", "'..'", "'['", "']'", "'{'", "'}'", 
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
            "StringLiteral", "AdditiveOperator", "MultiplicativeOperator", 
            "ComparisonOperator", "BooleanOperator", "NOTOperator", "AssignmentOperator", 
            "InOperator", "IfKeyword", "ElseKeyword", "LoopKeyword", "WhileKeyword", 
            "FunctionKeyword", "ReturnKeyword", "IntType", "FloatType", 
            "StringType", "BoolType", "ListType", "VoidType", "GlobalTypeModifier", 
            "Identifier", "Semicolon", "Colon", "Comma", "DoubleDot", "BracketLeft", 
            "BracketRight", "CurlyLeft", "CurlyRight", "ParenLeft", "ParenRight", 
            "ERROR_CHAR" ]

    ruleNames = [ "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
                  "StringLiteral", "ESC", "SAFECODEPOINT", "AdditiveOperator", 
                  "MultiplicativeOperator", "ComparisonOperator", "BooleanOperator", 
                  "NOTOperator", "AssignmentOperator", "InOperator", "IfKeyword", 
                  "ElseKeyword", "LoopKeyword", "WhileKeyword", "FunctionKeyword", 
                  "ReturnKeyword", "IntType", "FloatType", "StringType", 
                  "BoolType", "ListType", "VoidType", "GlobalTypeModifier", 
                  "Identifier", "Semicolon", "Colon", "Comma", "DoubleDot", 
                  "BracketLeft", "BracketRight", "CurlyLeft", "CurlyRight", 
                  "ParenLeft", "ParenRight", "ERROR_CHAR" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


