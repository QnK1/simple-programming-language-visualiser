# Generated from d:/Desktop/tkik_new/simple-programming-language-visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,246,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,4,0,73,8,0,11,0,12,0,74,1,0,1,0,1,1,1,
        1,1,1,1,1,5,1,83,8,1,10,1,12,1,86,9,1,1,1,1,1,1,2,3,2,91,8,2,1,2,
        1,2,5,2,95,8,2,10,2,12,2,98,9,2,1,2,3,2,101,8,2,1,3,1,3,1,3,4,3,
        106,8,3,11,3,12,3,107,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,119,
        8,4,1,5,1,5,1,5,5,5,124,8,5,10,5,12,5,127,9,5,1,5,1,5,1,6,1,6,1,
        6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,3,10,150,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        3,11,160,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,209,
        8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,5,24,221,
        8,24,10,24,12,24,224,9,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,0,15,0,17,7,19,8,21,9,23,10,25,
        11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,
        22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,
        33,1,0,10,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,49,57,1,0,48,
        57,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,3,
        0,0,31,34,34,92,92,2,0,43,43,45,45,3,0,37,37,42,42,47,47,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,264,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,1,72,1,0,0,0,3,78,1,0,0,0,5,100,1,0,0,0,7,102,
        1,0,0,0,9,118,1,0,0,0,11,120,1,0,0,0,13,130,1,0,0,0,15,133,1,0,0,
        0,17,135,1,0,0,0,19,137,1,0,0,0,21,149,1,0,0,0,23,159,1,0,0,0,25,
        161,1,0,0,0,27,165,1,0,0,0,29,167,1,0,0,0,31,170,1,0,0,0,33,173,
        1,0,0,0,35,177,1,0,0,0,37,181,1,0,0,0,39,185,1,0,0,0,41,189,1,0,
        0,0,43,208,1,0,0,0,45,210,1,0,0,0,47,214,1,0,0,0,49,218,1,0,0,0,
        51,225,1,0,0,0,53,227,1,0,0,0,55,229,1,0,0,0,57,231,1,0,0,0,59,234,
        1,0,0,0,61,236,1,0,0,0,63,238,1,0,0,0,65,240,1,0,0,0,67,242,1,0,
        0,0,69,244,1,0,0,0,71,73,7,0,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,
        72,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,6,0,0,0,77,2,1,0,0,
        0,78,79,5,47,0,0,79,80,5,47,0,0,80,84,1,0,0,0,81,83,8,1,0,0,82,81,
        1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,
        86,84,1,0,0,0,87,88,6,1,1,0,88,4,1,0,0,0,89,91,5,45,0,0,90,89,1,
        0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,96,7,2,0,0,93,95,7,3,0,0,94,
        93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,101,1,0,
        0,0,98,96,1,0,0,0,99,101,5,48,0,0,100,90,1,0,0,0,100,99,1,0,0,0,
        101,6,1,0,0,0,102,103,3,5,2,0,103,105,5,46,0,0,104,106,7,3,0,0,105,
        104,1,0,0,0,106,107,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,
        8,1,0,0,0,109,110,5,116,0,0,110,111,5,114,0,0,111,112,5,117,0,0,
        112,119,5,101,0,0,113,114,5,102,0,0,114,115,5,97,0,0,115,116,5,108,
        0,0,116,117,5,115,0,0,117,119,5,101,0,0,118,109,1,0,0,0,118,113,
        1,0,0,0,119,10,1,0,0,0,120,125,5,34,0,0,121,124,3,13,6,0,122,124,
        3,15,7,0,123,121,1,0,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,
        1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,129,
        5,34,0,0,129,12,1,0,0,0,130,131,5,92,0,0,131,132,7,4,0,0,132,14,
        1,0,0,0,133,134,8,5,0,0,134,16,1,0,0,0,135,136,7,6,0,0,136,18,1,
        0,0,0,137,138,7,7,0,0,138,20,1,0,0,0,139,150,5,62,0,0,140,141,5,
        62,0,0,141,150,5,61,0,0,142,150,5,60,0,0,143,144,5,60,0,0,144,150,
        5,61,0,0,145,146,5,61,0,0,146,150,5,61,0,0,147,148,5,33,0,0,148,
        150,5,61,0,0,149,139,1,0,0,0,149,140,1,0,0,0,149,142,1,0,0,0,149,
        143,1,0,0,0,149,145,1,0,0,0,149,147,1,0,0,0,150,22,1,0,0,0,151,152,
        5,97,0,0,152,153,5,110,0,0,153,160,5,100,0,0,154,155,5,111,0,0,155,
        160,5,114,0,0,156,157,5,120,0,0,157,158,5,111,0,0,158,160,5,114,
        0,0,159,151,1,0,0,0,159,154,1,0,0,0,159,156,1,0,0,0,160,24,1,0,0,
        0,161,162,5,110,0,0,162,163,5,111,0,0,163,164,5,116,0,0,164,26,1,
        0,0,0,165,166,5,61,0,0,166,28,1,0,0,0,167,168,5,105,0,0,168,169,
        5,110,0,0,169,30,1,0,0,0,170,171,5,105,0,0,171,172,5,102,0,0,172,
        32,1,0,0,0,173,174,5,101,0,0,174,175,5,108,0,0,175,176,5,115,0,0,
        176,34,1,0,0,0,177,178,5,108,0,0,178,179,5,111,0,0,179,180,5,112,
        0,0,180,36,1,0,0,0,181,182,5,119,0,0,182,183,5,104,0,0,183,184,5,
        108,0,0,184,38,1,0,0,0,185,186,5,102,0,0,186,187,5,117,0,0,187,188,
        5,110,0,0,188,40,1,0,0,0,189,190,5,114,0,0,190,191,5,101,0,0,191,
        192,5,116,0,0,192,42,1,0,0,0,193,194,5,105,0,0,194,195,5,110,0,0,
        195,209,5,116,0,0,196,197,5,102,0,0,197,198,5,108,0,0,198,209,5,
        111,0,0,199,200,5,115,0,0,200,201,5,116,0,0,201,209,5,114,0,0,202,
        203,5,98,0,0,203,204,5,111,0,0,204,209,5,108,0,0,205,206,5,108,0,
        0,206,207,5,115,0,0,207,209,5,116,0,0,208,193,1,0,0,0,208,196,1,
        0,0,0,208,199,1,0,0,0,208,202,1,0,0,0,208,205,1,0,0,0,209,44,1,0,
        0,0,210,211,5,110,0,0,211,212,5,117,0,0,212,213,5,108,0,0,213,46,
        1,0,0,0,214,215,5,103,0,0,215,216,5,108,0,0,216,217,5,111,0,0,217,
        48,1,0,0,0,218,222,7,8,0,0,219,221,7,9,0,0,220,219,1,0,0,0,221,224,
        1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,50,1,0,0,0,224,222,1,
        0,0,0,225,226,5,59,0,0,226,52,1,0,0,0,227,228,5,58,0,0,228,54,1,
        0,0,0,229,230,5,44,0,0,230,56,1,0,0,0,231,232,5,46,0,0,232,233,5,
        46,0,0,233,58,1,0,0,0,234,235,5,91,0,0,235,60,1,0,0,0,236,237,5,
        93,0,0,237,62,1,0,0,0,238,239,5,123,0,0,239,64,1,0,0,0,240,241,5,
        125,0,0,241,66,1,0,0,0,242,243,5,40,0,0,243,68,1,0,0,0,244,245,5,
        41,0,0,245,70,1,0,0,0,14,0,74,84,90,96,100,107,118,123,125,149,159,
        208,222,2,6,0,0,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    IntLiteral = 3
    FloatLiteral = 4
    BoolLiteral = 5
    StringLiteral = 6
    AdditiveOperator = 7
    MultiplicativeOperator = 8
    ComparisonOperator = 9
    BooleanOperator = 10
    NOTOperator = 11
    AssignmentOperator = 12
    InOperator = 13
    IfKeyword = 14
    ElseKeyword = 15
    LoopKeyword = 16
    WhileKeyword = 17
    FunctionKeyword = 18
    ReturnKeyword = 19
    Type = 20
    VoidType = 21
    GlobalTypeModifier = 22
    Identifier = 23
    Semicolon = 24
    Colon = 25
    Comma = 26
    DoubleDot = 27
    BracketLeft = 28
    BracketRight = 29
    CurlyLeft = 30
    CurlyRight = 31
    ParenLeft = 32
    ParenRight = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'not'", "'='", "'in'", "'if'", "'els'", "'lop'", "'whl'", "'fun'", 
            "'ret'", "'nul'", "'glo'", "';'", "':'", "','", "'..'", "'['", 
            "']'", "'{'", "'}'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
            "StringLiteral", "AdditiveOperator", "MultiplicativeOperator", 
            "ComparisonOperator", "BooleanOperator", "NOTOperator", "AssignmentOperator", 
            "InOperator", "IfKeyword", "ElseKeyword", "LoopKeyword", "WhileKeyword", 
            "FunctionKeyword", "ReturnKeyword", "Type", "VoidType", "GlobalTypeModifier", 
            "Identifier", "Semicolon", "Colon", "Comma", "DoubleDot", "BracketLeft", 
            "BracketRight", "CurlyLeft", "CurlyRight", "ParenLeft", "ParenRight" ]

    ruleNames = [ "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
                  "StringLiteral", "ESC", "SAFECODEPOINT", "AdditiveOperator", 
                  "MultiplicativeOperator", "ComparisonOperator", "BooleanOperator", 
                  "NOTOperator", "AssignmentOperator", "InOperator", "IfKeyword", 
                  "ElseKeyword", "LoopKeyword", "WhileKeyword", "FunctionKeyword", 
                  "ReturnKeyword", "Type", "VoidType", "GlobalTypeModifier", 
                  "Identifier", "Semicolon", "Colon", "Comma", "DoubleDot", 
                  "BracketLeft", "BracketRight", "CurlyLeft", "CurlyRight", 
                  "ParenLeft", "ParenRight" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


