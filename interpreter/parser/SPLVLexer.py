# Generated from d:/Desktop/tkik_new/simple-programming-language-visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,240,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,4,0,71,8,0,11,0,12,0,72,1,0,1,0,1,1,1,1,1,1,1,1,
        5,1,81,8,1,10,1,12,1,84,9,1,1,1,1,1,1,2,3,2,89,8,2,1,2,1,2,5,2,93,
        8,2,10,2,12,2,96,9,2,1,2,3,2,99,8,2,1,3,1,3,1,3,4,3,104,8,3,11,3,
        12,3,105,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,117,8,4,1,5,1,5,
        1,5,5,5,122,8,5,10,5,12,5,125,9,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        3,10,148,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,158,8,
        11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,3,20,203,8,20,1,21,1,21,1,21,1,21,1,22,1,
        22,1,22,1,22,1,23,1,23,5,23,215,8,23,10,23,12,23,218,9,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,
        13,0,15,0,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,
        16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,
        27,59,28,61,29,63,30,65,31,67,32,1,0,10,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,1,0,49,57,1,0,48,57,8,0,34,34,47,47,92,92,98,98,102,
        102,110,110,114,114,116,116,3,0,0,31,34,34,92,92,2,0,43,43,45,45,
        3,0,37,37,42,42,47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,258,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,70,1,0,0,0,3,76,1,0,0,0,5,
        98,1,0,0,0,7,100,1,0,0,0,9,116,1,0,0,0,11,118,1,0,0,0,13,128,1,0,
        0,0,15,131,1,0,0,0,17,133,1,0,0,0,19,135,1,0,0,0,21,147,1,0,0,0,
        23,157,1,0,0,0,25,159,1,0,0,0,27,163,1,0,0,0,29,165,1,0,0,0,31,168,
        1,0,0,0,33,171,1,0,0,0,35,175,1,0,0,0,37,179,1,0,0,0,39,183,1,0,
        0,0,41,202,1,0,0,0,43,204,1,0,0,0,45,208,1,0,0,0,47,212,1,0,0,0,
        49,219,1,0,0,0,51,221,1,0,0,0,53,223,1,0,0,0,55,225,1,0,0,0,57,228,
        1,0,0,0,59,230,1,0,0,0,61,232,1,0,0,0,63,234,1,0,0,0,65,236,1,0,
        0,0,67,238,1,0,0,0,69,71,7,0,0,0,70,69,1,0,0,0,71,72,1,0,0,0,72,
        70,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,75,6,0,0,0,75,2,1,0,0,
        0,76,77,5,47,0,0,77,78,5,47,0,0,78,82,1,0,0,0,79,81,8,1,0,0,80,79,
        1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,
        84,82,1,0,0,0,85,86,6,1,1,0,86,4,1,0,0,0,87,89,5,45,0,0,88,87,1,
        0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,94,7,2,0,0,91,93,7,3,0,0,92,
        91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,99,1,0,0,
        0,96,94,1,0,0,0,97,99,5,48,0,0,98,88,1,0,0,0,98,97,1,0,0,0,99,6,
        1,0,0,0,100,101,3,5,2,0,101,103,5,46,0,0,102,104,7,3,0,0,103,102,
        1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,8,1,
        0,0,0,107,108,5,116,0,0,108,109,5,114,0,0,109,110,5,117,0,0,110,
        117,5,101,0,0,111,112,5,102,0,0,112,113,5,97,0,0,113,114,5,108,0,
        0,114,115,5,115,0,0,115,117,5,101,0,0,116,107,1,0,0,0,116,111,1,
        0,0,0,117,10,1,0,0,0,118,123,5,34,0,0,119,122,3,13,6,0,120,122,3,
        15,7,0,121,119,1,0,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,
        0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,
        34,0,0,127,12,1,0,0,0,128,129,5,92,0,0,129,130,7,4,0,0,130,14,1,
        0,0,0,131,132,8,5,0,0,132,16,1,0,0,0,133,134,7,6,0,0,134,18,1,0,
        0,0,135,136,7,7,0,0,136,20,1,0,0,0,137,148,5,62,0,0,138,139,5,62,
        0,0,139,148,5,61,0,0,140,148,5,60,0,0,141,142,5,60,0,0,142,148,5,
        61,0,0,143,144,5,61,0,0,144,148,5,61,0,0,145,146,5,33,0,0,146,148,
        5,61,0,0,147,137,1,0,0,0,147,138,1,0,0,0,147,140,1,0,0,0,147,141,
        1,0,0,0,147,143,1,0,0,0,147,145,1,0,0,0,148,22,1,0,0,0,149,150,5,
        97,0,0,150,151,5,110,0,0,151,158,5,100,0,0,152,153,5,111,0,0,153,
        158,5,114,0,0,154,155,5,120,0,0,155,156,5,111,0,0,156,158,5,114,
        0,0,157,149,1,0,0,0,157,152,1,0,0,0,157,154,1,0,0,0,158,24,1,0,0,
        0,159,160,5,110,0,0,160,161,5,111,0,0,161,162,5,116,0,0,162,26,1,
        0,0,0,163,164,5,61,0,0,164,28,1,0,0,0,165,166,5,105,0,0,166,167,
        5,110,0,0,167,30,1,0,0,0,168,169,5,105,0,0,169,170,5,102,0,0,170,
        32,1,0,0,0,171,172,5,108,0,0,172,173,5,111,0,0,173,174,5,112,0,0,
        174,34,1,0,0,0,175,176,5,119,0,0,176,177,5,104,0,0,177,178,5,108,
        0,0,178,36,1,0,0,0,179,180,5,102,0,0,180,181,5,117,0,0,181,182,5,
        110,0,0,182,38,1,0,0,0,183,184,5,114,0,0,184,185,5,101,0,0,185,186,
        5,116,0,0,186,40,1,0,0,0,187,188,5,105,0,0,188,189,5,110,0,0,189,
        203,5,116,0,0,190,191,5,102,0,0,191,192,5,108,0,0,192,203,5,111,
        0,0,193,194,5,115,0,0,194,195,5,116,0,0,195,203,5,114,0,0,196,197,
        5,98,0,0,197,198,5,111,0,0,198,203,5,108,0,0,199,200,5,108,0,0,200,
        201,5,115,0,0,201,203,5,116,0,0,202,187,1,0,0,0,202,190,1,0,0,0,
        202,193,1,0,0,0,202,196,1,0,0,0,202,199,1,0,0,0,203,42,1,0,0,0,204,
        205,5,110,0,0,205,206,5,117,0,0,206,207,5,108,0,0,207,44,1,0,0,0,
        208,209,5,103,0,0,209,210,5,108,0,0,210,211,5,111,0,0,211,46,1,0,
        0,0,212,216,7,8,0,0,213,215,7,9,0,0,214,213,1,0,0,0,215,218,1,0,
        0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,48,1,0,0,0,218,216,1,0,0,
        0,219,220,5,59,0,0,220,50,1,0,0,0,221,222,5,58,0,0,222,52,1,0,0,
        0,223,224,5,44,0,0,224,54,1,0,0,0,225,226,5,46,0,0,226,227,5,46,
        0,0,227,56,1,0,0,0,228,229,5,91,0,0,229,58,1,0,0,0,230,231,5,93,
        0,0,231,60,1,0,0,0,232,233,5,123,0,0,233,62,1,0,0,0,234,235,5,125,
        0,0,235,64,1,0,0,0,236,237,5,40,0,0,237,66,1,0,0,0,238,239,5,41,
        0,0,239,68,1,0,0,0,14,0,72,82,88,94,98,105,116,121,123,147,157,202,
        216,2,6,0,0,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    IntLiteral = 3
    FloatLiteral = 4
    BoolLiteral = 5
    StringLiteral = 6
    AdditiveOperator = 7
    MultiplicativeOperator = 8
    ComparisonOperator = 9
    BooleanOperator = 10
    NOTOperator = 11
    AssignmentOperator = 12
    InOperator = 13
    IfKeyword = 14
    LoopKeyword = 15
    WhileKeyword = 16
    FunctionKeyword = 17
    ReturnKeyword = 18
    Type = 19
    VoidType = 20
    GlobalTypeModifier = 21
    Identifier = 22
    Semicolon = 23
    Colon = 24
    Comma = 25
    DoubleDot = 26
    BracketLeft = 27
    BracketRight = 28
    CurlyLeft = 29
    CurlyRight = 30
    ParenLeft = 31
    ParenRight = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'not'", "'='", "'in'", "'if'", "'lop'", "'whl'", "'fun'", "'ret'", 
            "'nul'", "'glo'", "';'", "':'", "','", "'..'", "'['", "']'", 
            "'{'", "'}'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
            "StringLiteral", "AdditiveOperator", "MultiplicativeOperator", 
            "ComparisonOperator", "BooleanOperator", "NOTOperator", "AssignmentOperator", 
            "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", "FunctionKeyword", 
            "ReturnKeyword", "Type", "VoidType", "GlobalTypeModifier", "Identifier", 
            "Semicolon", "Colon", "Comma", "DoubleDot", "BracketLeft", "BracketRight", 
            "CurlyLeft", "CurlyRight", "ParenLeft", "ParenRight" ]

    ruleNames = [ "WS", "Comment", "IntLiteral", "FloatLiteral", "BoolLiteral", 
                  "StringLiteral", "ESC", "SAFECODEPOINT", "AdditiveOperator", 
                  "MultiplicativeOperator", "ComparisonOperator", "BooleanOperator", 
                  "NOTOperator", "AssignmentOperator", "InOperator", "IfKeyword", 
                  "LoopKeyword", "WhileKeyword", "FunctionKeyword", "ReturnKeyword", 
                  "Type", "VoidType", "GlobalTypeModifier", "Identifier", 
                  "Semicolon", "Colon", "Comma", "DoubleDot", "BracketLeft", 
                  "BracketRight", "CurlyLeft", "CurlyRight", "ParenLeft", 
                  "ParenRight" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


