# Generated from d:/Users/Kacper/Desktop/tkik/simple-programming-language-visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,231,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,4,
        0,67,8,0,11,0,12,0,68,1,0,1,0,1,1,1,1,1,1,1,1,5,1,77,8,1,10,1,12,
        1,80,9,1,1,1,1,1,1,2,1,2,5,2,86,8,2,10,2,12,2,89,9,2,1,3,3,3,92,
        8,3,1,3,1,3,5,3,96,8,3,10,3,12,3,99,9,3,1,3,3,3,102,8,3,1,4,1,4,
        1,4,5,4,107,8,4,10,4,12,4,110,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,3,5,121,8,5,1,6,1,6,1,6,5,6,126,8,6,10,6,12,6,129,9,6,1,6,
        1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,3,11,152,8,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,3,12,162,8,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,207,8,
        21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,
        26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,0,0,32,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,0,17,0,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,
        51,24,53,25,55,26,57,27,59,28,61,29,63,30,1,0,10,3,0,9,10,13,13,
        32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,49,57,1,0,48,57,8,0,34,34,47,47,92,92,98,98,102,102,
        110,110,114,114,116,116,3,0,0,31,34,34,92,92,2,0,43,43,45,45,3,0,
        37,37,42,42,47,47,249,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,1,66,1,0,0,0,3,72,1,0,0,0,5,83,1,0,0,0,7,101,
        1,0,0,0,9,103,1,0,0,0,11,120,1,0,0,0,13,122,1,0,0,0,15,132,1,0,0,
        0,17,135,1,0,0,0,19,137,1,0,0,0,21,139,1,0,0,0,23,151,1,0,0,0,25,
        161,1,0,0,0,27,163,1,0,0,0,29,165,1,0,0,0,31,167,1,0,0,0,33,170,
        1,0,0,0,35,173,1,0,0,0,37,177,1,0,0,0,39,183,1,0,0,0,41,187,1,0,
        0,0,43,206,1,0,0,0,45,208,1,0,0,0,47,213,1,0,0,0,49,215,1,0,0,0,
        51,217,1,0,0,0,53,219,1,0,0,0,55,221,1,0,0,0,57,223,1,0,0,0,59,225,
        1,0,0,0,61,227,1,0,0,0,63,229,1,0,0,0,65,67,7,0,0,0,66,65,1,0,0,
        0,67,68,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,71,
        6,0,0,0,71,2,1,0,0,0,72,73,5,47,0,0,73,74,5,47,0,0,74,78,1,0,0,0,
        75,77,8,1,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,
        0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,6,1,1,0,82,4,1,0,0,0,83,
        87,7,2,0,0,84,86,7,3,0,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,
        0,87,88,1,0,0,0,88,6,1,0,0,0,89,87,1,0,0,0,90,92,5,45,0,0,91,90,
        1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,97,7,4,0,0,94,96,7,5,0,0,
        95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,102,1,
        0,0,0,99,97,1,0,0,0,100,102,5,48,0,0,101,91,1,0,0,0,101,100,1,0,
        0,0,102,8,1,0,0,0,103,104,3,7,3,0,104,108,5,46,0,0,105,107,7,5,0,
        0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,
        0,109,10,1,0,0,0,110,108,1,0,0,0,111,112,5,116,0,0,112,113,5,114,
        0,0,113,114,5,117,0,0,114,121,5,101,0,0,115,116,5,102,0,0,116,117,
        5,97,0,0,117,118,5,108,0,0,118,119,5,115,0,0,119,121,5,101,0,0,120,
        111,1,0,0,0,120,115,1,0,0,0,121,12,1,0,0,0,122,127,5,34,0,0,123,
        126,3,15,7,0,124,126,3,17,8,0,125,123,1,0,0,0,125,124,1,0,0,0,126,
        129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,
        127,1,0,0,0,130,131,5,34,0,0,131,14,1,0,0,0,132,133,5,92,0,0,133,
        134,7,6,0,0,134,16,1,0,0,0,135,136,8,7,0,0,136,18,1,0,0,0,137,138,
        7,8,0,0,138,20,1,0,0,0,139,140,7,9,0,0,140,22,1,0,0,0,141,152,5,
        62,0,0,142,143,5,62,0,0,143,152,5,61,0,0,144,152,5,60,0,0,145,146,
        5,60,0,0,146,152,5,61,0,0,147,148,5,61,0,0,148,152,5,61,0,0,149,
        150,5,33,0,0,150,152,5,61,0,0,151,141,1,0,0,0,151,142,1,0,0,0,151,
        144,1,0,0,0,151,145,1,0,0,0,151,147,1,0,0,0,151,149,1,0,0,0,152,
        24,1,0,0,0,153,154,5,97,0,0,154,155,5,110,0,0,155,162,5,100,0,0,
        156,157,5,111,0,0,157,162,5,114,0,0,158,159,5,120,0,0,159,160,5,
        111,0,0,160,162,5,114,0,0,161,153,1,0,0,0,161,156,1,0,0,0,161,158,
        1,0,0,0,162,26,1,0,0,0,163,164,5,33,0,0,164,28,1,0,0,0,165,166,5,
        61,0,0,166,30,1,0,0,0,167,168,5,105,0,0,168,169,5,110,0,0,169,32,
        1,0,0,0,170,171,5,105,0,0,171,172,5,102,0,0,172,34,1,0,0,0,173,174,
        5,108,0,0,174,175,5,111,0,0,175,176,5,112,0,0,176,36,1,0,0,0,177,
        178,5,119,0,0,178,179,5,104,0,0,179,180,5,105,0,0,180,181,5,108,
        0,0,181,182,5,101,0,0,182,38,1,0,0,0,183,184,5,102,0,0,184,185,5,
        117,0,0,185,186,5,110,0,0,186,40,1,0,0,0,187,188,5,114,0,0,188,189,
        5,101,0,0,189,190,5,116,0,0,190,42,1,0,0,0,191,192,5,105,0,0,192,
        193,5,110,0,0,193,207,5,116,0,0,194,195,5,102,0,0,195,196,5,108,
        0,0,196,207,5,111,0,0,197,198,5,115,0,0,198,199,5,116,0,0,199,207,
        5,114,0,0,200,201,5,98,0,0,201,202,5,111,0,0,202,207,5,108,0,0,203,
        204,5,108,0,0,204,205,5,115,0,0,205,207,5,116,0,0,206,191,1,0,0,
        0,206,194,1,0,0,0,206,197,1,0,0,0,206,200,1,0,0,0,206,203,1,0,0,
        0,207,44,1,0,0,0,208,209,5,103,0,0,209,210,5,108,0,0,210,211,5,111,
        0,0,211,212,5,98,0,0,212,46,1,0,0,0,213,214,5,59,0,0,214,48,1,0,
        0,0,215,216,5,58,0,0,216,50,1,0,0,0,217,218,5,44,0,0,218,52,1,0,
        0,0,219,220,5,91,0,0,220,54,1,0,0,0,221,222,5,93,0,0,222,56,1,0,
        0,0,223,224,5,123,0,0,224,58,1,0,0,0,225,226,5,125,0,0,226,60,1,
        0,0,0,227,228,5,40,0,0,228,62,1,0,0,0,229,230,5,41,0,0,230,64,1,
        0,0,0,14,0,68,78,87,91,97,101,108,120,125,127,151,161,206,2,6,0,
        0,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    Identifier = 3
    IntLiteral = 4
    FloatLiteral = 5
    BoolLiteral = 6
    StringLiteral = 7
    AdditiveOperator = 8
    MultiplicativeOperator = 9
    ComparisonOperator = 10
    BooleanOperator = 11
    NOTOperator = 12
    AssignmentOperator = 13
    InOperator = 14
    IfKeyword = 15
    LoopKeyword = 16
    WhileKeyword = 17
    FunctionKeyword = 18
    ReturnKeyword = 19
    Type = 20
    GlobalTypeModifier = 21
    Semicolon = 22
    Colon = 23
    Comma = 24
    BracketLeft = 25
    BracketRight = 26
    CurlyLeft = 27
    CurlRight = 28
    ParenLeft = 29
    ParenRight = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!'", "'='", "'in'", "'if'", "'lop'", "'while'", "'fun'", "'ret'", 
            "'glob'", "';'", "':'", "','", "'['", "']'", "'{'", "'}'", "'('", 
            "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
            "BoolLiteral", "StringLiteral", "AdditiveOperator", "MultiplicativeOperator", 
            "ComparisonOperator", "BooleanOperator", "NOTOperator", "AssignmentOperator", 
            "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", "FunctionKeyword", 
            "ReturnKeyword", "Type", "GlobalTypeModifier", "Semicolon", 
            "Colon", "Comma", "BracketLeft", "BracketRight", "CurlyLeft", 
            "CurlRight", "ParenLeft", "ParenRight" ]

    ruleNames = [ "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
                  "BoolLiteral", "StringLiteral", "ESC", "SAFECODEPOINT", 
                  "AdditiveOperator", "MultiplicativeOperator", "ComparisonOperator", 
                  "BooleanOperator", "NOTOperator", "AssignmentOperator", 
                  "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", 
                  "FunctionKeyword", "ReturnKeyword", "Type", "GlobalTypeModifier", 
                  "Semicolon", "Colon", "Comma", "BracketLeft", "BracketRight", 
                  "CurlyLeft", "CurlRight", "ParenLeft", "ParenRight" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


