# Generated from d:/Desktop/SPLV/simple-programming-language-visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,239,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,4,0,71,8,0,11,0,12,0,72,1,0,1,0,1,1,1,1,1,1,1,1,
        5,1,81,8,1,10,1,12,1,84,9,1,1,1,1,1,1,2,1,2,5,2,90,8,2,10,2,12,2,
        93,9,2,1,3,3,3,96,8,3,1,3,1,3,5,3,100,8,3,10,3,12,3,103,9,3,1,3,
        3,3,106,8,3,1,4,1,4,1,4,5,4,111,8,4,10,4,12,4,114,9,4,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,125,8,5,1,6,1,6,1,6,5,6,130,8,6,10,
        6,12,6,133,9,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,156,8,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,166,8,12,1,13,1,13,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,
        209,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        0,17,0,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,
        39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,
        61,29,63,30,65,31,67,32,1,0,10,3,0,9,10,13,13,32,32,2,0,10,10,13,
        13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,
        1,0,48,57,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,
        116,3,0,0,31,34,34,92,92,2,0,43,43,45,45,3,0,37,37,42,42,47,47,257,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,1,70,1,0,0,0,3,76,1,0,0,0,5,87,1,0,0,0,7,105,
        1,0,0,0,9,107,1,0,0,0,11,124,1,0,0,0,13,126,1,0,0,0,15,136,1,0,0,
        0,17,139,1,0,0,0,19,141,1,0,0,0,21,143,1,0,0,0,23,155,1,0,0,0,25,
        165,1,0,0,0,27,167,1,0,0,0,29,169,1,0,0,0,31,171,1,0,0,0,33,174,
        1,0,0,0,35,177,1,0,0,0,37,181,1,0,0,0,39,185,1,0,0,0,41,189,1,0,
        0,0,43,208,1,0,0,0,45,210,1,0,0,0,47,214,1,0,0,0,49,218,1,0,0,0,
        51,220,1,0,0,0,53,222,1,0,0,0,55,224,1,0,0,0,57,227,1,0,0,0,59,229,
        1,0,0,0,61,231,1,0,0,0,63,233,1,0,0,0,65,235,1,0,0,0,67,237,1,0,
        0,0,69,71,7,0,0,0,70,69,1,0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,
        1,0,0,0,73,74,1,0,0,0,74,75,6,0,0,0,75,2,1,0,0,0,76,77,5,47,0,0,
        77,78,5,47,0,0,78,82,1,0,0,0,79,81,8,1,0,0,80,79,1,0,0,0,81,84,1,
        0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,
        86,6,1,1,0,86,4,1,0,0,0,87,91,7,2,0,0,88,90,7,3,0,0,89,88,1,0,0,
        0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,6,1,0,0,0,93,91,1,
        0,0,0,94,96,5,45,0,0,95,94,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,
        101,7,4,0,0,98,100,7,5,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,
        1,0,0,0,101,102,1,0,0,0,102,106,1,0,0,0,103,101,1,0,0,0,104,106,
        5,48,0,0,105,95,1,0,0,0,105,104,1,0,0,0,106,8,1,0,0,0,107,108,3,
        7,3,0,108,112,5,46,0,0,109,111,7,5,0,0,110,109,1,0,0,0,111,114,1,
        0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,10,1,0,0,0,114,112,1,0,
        0,0,115,116,5,116,0,0,116,117,5,114,0,0,117,118,5,117,0,0,118,125,
        5,101,0,0,119,120,5,102,0,0,120,121,5,97,0,0,121,122,5,108,0,0,122,
        123,5,115,0,0,123,125,5,101,0,0,124,115,1,0,0,0,124,119,1,0,0,0,
        125,12,1,0,0,0,126,131,5,34,0,0,127,130,3,15,7,0,128,130,3,17,8,
        0,129,127,1,0,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,
        0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,134,135,5,34,0,
        0,135,14,1,0,0,0,136,137,5,92,0,0,137,138,7,6,0,0,138,16,1,0,0,0,
        139,140,8,7,0,0,140,18,1,0,0,0,141,142,7,8,0,0,142,20,1,0,0,0,143,
        144,7,9,0,0,144,22,1,0,0,0,145,156,5,62,0,0,146,147,5,62,0,0,147,
        156,5,61,0,0,148,156,5,60,0,0,149,150,5,60,0,0,150,156,5,61,0,0,
        151,152,5,61,0,0,152,156,5,61,0,0,153,154,5,33,0,0,154,156,5,61,
        0,0,155,145,1,0,0,0,155,146,1,0,0,0,155,148,1,0,0,0,155,149,1,0,
        0,0,155,151,1,0,0,0,155,153,1,0,0,0,156,24,1,0,0,0,157,158,5,97,
        0,0,158,159,5,110,0,0,159,166,5,100,0,0,160,161,5,111,0,0,161,166,
        5,114,0,0,162,163,5,120,0,0,163,164,5,111,0,0,164,166,5,114,0,0,
        165,157,1,0,0,0,165,160,1,0,0,0,165,162,1,0,0,0,166,26,1,0,0,0,167,
        168,5,33,0,0,168,28,1,0,0,0,169,170,5,61,0,0,170,30,1,0,0,0,171,
        172,5,105,0,0,172,173,5,110,0,0,173,32,1,0,0,0,174,175,5,105,0,0,
        175,176,5,102,0,0,176,34,1,0,0,0,177,178,5,108,0,0,178,179,5,111,
        0,0,179,180,5,112,0,0,180,36,1,0,0,0,181,182,5,119,0,0,182,183,5,
        104,0,0,183,184,5,108,0,0,184,38,1,0,0,0,185,186,5,102,0,0,186,187,
        5,117,0,0,187,188,5,110,0,0,188,40,1,0,0,0,189,190,5,114,0,0,190,
        191,5,101,0,0,191,192,5,116,0,0,192,42,1,0,0,0,193,194,5,105,0,0,
        194,195,5,110,0,0,195,209,5,116,0,0,196,197,5,102,0,0,197,198,5,
        108,0,0,198,209,5,111,0,0,199,200,5,115,0,0,200,201,5,116,0,0,201,
        209,5,114,0,0,202,203,5,98,0,0,203,204,5,111,0,0,204,209,5,108,0,
        0,205,206,5,108,0,0,206,207,5,115,0,0,207,209,5,116,0,0,208,193,
        1,0,0,0,208,196,1,0,0,0,208,199,1,0,0,0,208,202,1,0,0,0,208,205,
        1,0,0,0,209,44,1,0,0,0,210,211,5,110,0,0,211,212,5,117,0,0,212,213,
        5,108,0,0,213,46,1,0,0,0,214,215,5,103,0,0,215,216,5,108,0,0,216,
        217,5,111,0,0,217,48,1,0,0,0,218,219,5,59,0,0,219,50,1,0,0,0,220,
        221,5,58,0,0,221,52,1,0,0,0,222,223,5,44,0,0,223,54,1,0,0,0,224,
        225,5,46,0,0,225,226,5,46,0,0,226,56,1,0,0,0,227,228,5,91,0,0,228,
        58,1,0,0,0,229,230,5,93,0,0,230,60,1,0,0,0,231,232,5,123,0,0,232,
        62,1,0,0,0,233,234,5,125,0,0,234,64,1,0,0,0,235,236,5,40,0,0,236,
        66,1,0,0,0,237,238,5,41,0,0,238,68,1,0,0,0,14,0,72,82,91,95,101,
        105,112,124,129,131,155,165,208,2,6,0,0,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    Identifier = 3
    IntLiteral = 4
    FloatLiteral = 5
    BoolLiteral = 6
    StringLiteral = 7
    AdditiveOperator = 8
    MultiplicativeOperator = 9
    ComparisonOperator = 10
    BooleanOperator = 11
    NOTOperator = 12
    AssignmentOperator = 13
    InOperator = 14
    IfKeyword = 15
    LoopKeyword = 16
    WhileKeyword = 17
    FunctionKeyword = 18
    ReturnKeyword = 19
    Type = 20
    VoidType = 21
    GlobalTypeModifier = 22
    Semicolon = 23
    Colon = 24
    Comma = 25
    DoubleDot = 26
    BracketLeft = 27
    BracketRight = 28
    CurlyLeft = 29
    CurlyRight = 30
    ParenLeft = 31
    ParenRight = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!'", "'='", "'in'", "'if'", "'lop'", "'whl'", "'fun'", "'ret'", 
            "'nul'", "'glo'", "';'", "':'", "','", "'..'", "'['", "']'", 
            "'{'", "'}'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
            "BoolLiteral", "StringLiteral", "AdditiveOperator", "MultiplicativeOperator", 
            "ComparisonOperator", "BooleanOperator", "NOTOperator", "AssignmentOperator", 
            "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", "FunctionKeyword", 
            "ReturnKeyword", "Type", "VoidType", "GlobalTypeModifier", "Semicolon", 
            "Colon", "Comma", "DoubleDot", "BracketLeft", "BracketRight", 
            "CurlyLeft", "CurlyRight", "ParenLeft", "ParenRight" ]

    ruleNames = [ "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
                  "BoolLiteral", "StringLiteral", "ESC", "SAFECODEPOINT", 
                  "AdditiveOperator", "MultiplicativeOperator", "ComparisonOperator", 
                  "BooleanOperator", "NOTOperator", "AssignmentOperator", 
                  "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", 
                  "FunctionKeyword", "ReturnKeyword", "Type", "VoidType", 
                  "GlobalTypeModifier", "Semicolon", "Colon", "Comma", "DoubleDot", 
                  "BracketLeft", "BracketRight", "CurlyLeft", "CurlyRight", 
                  "ParenLeft", "ParenRight" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


