# Generated from d:/Users/Kacper/Desktop/tkik/simple-programming-language-visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,249,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,4,0,87,8,0,11,0,12,0,88,1,0,1,0,
        1,1,1,1,1,1,1,1,5,1,97,8,1,10,1,12,1,100,9,1,1,1,1,1,1,2,1,2,5,2,
        106,8,2,10,2,12,2,109,9,2,1,3,1,3,5,3,113,8,3,10,3,12,3,116,9,3,
        1,3,3,3,119,8,3,1,4,1,4,1,4,5,4,124,8,4,10,4,12,4,127,9,4,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,138,8,5,1,6,1,6,1,6,5,6,143,8,
        6,10,6,12,6,146,9,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,
        1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
        0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,0,17,0,19,8,21,9,23,10,25,
        11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,
        22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,
        33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,1,0,8,3,0,9,10,13,13,
        32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,49,57,1,0,48,57,8,0,34,34,47,47,92,92,98,98,102,102,
        110,110,114,114,116,116,3,0,0,31,34,34,92,92,255,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,86,1,0,0,0,3,92,1,
        0,0,0,5,103,1,0,0,0,7,118,1,0,0,0,9,120,1,0,0,0,11,137,1,0,0,0,13,
        139,1,0,0,0,15,149,1,0,0,0,17,152,1,0,0,0,19,154,1,0,0,0,21,156,
        1,0,0,0,23,158,1,0,0,0,25,160,1,0,0,0,27,162,1,0,0,0,29,164,1,0,
        0,0,31,167,1,0,0,0,33,169,1,0,0,0,35,172,1,0,0,0,37,175,1,0,0,0,
        39,178,1,0,0,0,41,180,1,0,0,0,43,182,1,0,0,0,45,185,1,0,0,0,47,188,
        1,0,0,0,49,192,1,0,0,0,51,198,1,0,0,0,53,202,1,0,0,0,55,206,1,0,
        0,0,57,210,1,0,0,0,59,214,1,0,0,0,61,218,1,0,0,0,63,222,1,0,0,0,
        65,226,1,0,0,0,67,231,1,0,0,0,69,233,1,0,0,0,71,235,1,0,0,0,73,237,
        1,0,0,0,75,239,1,0,0,0,77,241,1,0,0,0,79,243,1,0,0,0,81,245,1,0,
        0,0,83,247,1,0,0,0,85,87,7,0,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,
        86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,6,0,0,0,91,2,1,0,0,
        0,92,93,5,47,0,0,93,94,5,47,0,0,94,98,1,0,0,0,95,97,8,1,0,0,96,95,
        1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,
        0,100,98,1,0,0,0,101,102,6,1,1,0,102,4,1,0,0,0,103,107,7,2,0,0,104,
        106,7,3,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,
        108,1,0,0,0,108,6,1,0,0,0,109,107,1,0,0,0,110,114,7,4,0,0,111,113,
        7,5,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,
        1,0,0,0,115,119,1,0,0,0,116,114,1,0,0,0,117,119,5,48,0,0,118,110,
        1,0,0,0,118,117,1,0,0,0,119,8,1,0,0,0,120,121,3,7,3,0,121,125,5,
        46,0,0,122,124,7,5,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,
        0,0,0,125,126,1,0,0,0,126,10,1,0,0,0,127,125,1,0,0,0,128,129,5,116,
        0,0,129,130,5,114,0,0,130,131,5,117,0,0,131,138,5,101,0,0,132,133,
        5,102,0,0,133,134,5,97,0,0,134,135,5,108,0,0,135,136,5,115,0,0,136,
        138,5,101,0,0,137,128,1,0,0,0,137,132,1,0,0,0,138,12,1,0,0,0,139,
        144,5,34,0,0,140,143,3,15,7,0,141,143,3,17,8,0,142,140,1,0,0,0,142,
        141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,
        147,1,0,0,0,146,144,1,0,0,0,147,148,5,34,0,0,148,14,1,0,0,0,149,
        150,5,92,0,0,150,151,7,6,0,0,151,16,1,0,0,0,152,153,8,7,0,0,153,
        18,1,0,0,0,154,155,5,43,0,0,155,20,1,0,0,0,156,157,5,45,0,0,157,
        22,1,0,0,0,158,159,5,42,0,0,159,24,1,0,0,0,160,161,5,47,0,0,161,
        26,1,0,0,0,162,163,5,62,0,0,163,28,1,0,0,0,164,165,5,62,0,0,165,
        166,5,61,0,0,166,30,1,0,0,0,167,168,5,60,0,0,168,32,1,0,0,0,169,
        170,5,60,0,0,170,171,5,61,0,0,171,34,1,0,0,0,172,173,5,61,0,0,173,
        174,5,61,0,0,174,36,1,0,0,0,175,176,5,33,0,0,176,177,5,61,0,0,177,
        38,1,0,0,0,178,179,5,33,0,0,179,40,1,0,0,0,180,181,5,61,0,0,181,
        42,1,0,0,0,182,183,5,105,0,0,183,184,5,110,0,0,184,44,1,0,0,0,185,
        186,5,105,0,0,186,187,5,102,0,0,187,46,1,0,0,0,188,189,5,108,0,0,
        189,190,5,111,0,0,190,191,5,112,0,0,191,48,1,0,0,0,192,193,5,119,
        0,0,193,194,5,104,0,0,194,195,5,105,0,0,195,196,5,108,0,0,196,197,
        5,101,0,0,197,50,1,0,0,0,198,199,5,102,0,0,199,200,5,117,0,0,200,
        201,5,110,0,0,201,52,1,0,0,0,202,203,5,114,0,0,203,204,5,101,0,0,
        204,205,5,116,0,0,205,54,1,0,0,0,206,207,5,105,0,0,207,208,5,110,
        0,0,208,209,5,116,0,0,209,56,1,0,0,0,210,211,5,102,0,0,211,212,5,
        108,0,0,212,213,5,111,0,0,213,58,1,0,0,0,214,215,5,115,0,0,215,216,
        5,116,0,0,216,217,5,114,0,0,217,60,1,0,0,0,218,219,5,98,0,0,219,
        220,5,111,0,0,220,221,5,108,0,0,221,62,1,0,0,0,222,223,5,108,0,0,
        223,224,5,115,0,0,224,225,5,116,0,0,225,64,1,0,0,0,226,227,5,103,
        0,0,227,228,5,108,0,0,228,229,5,111,0,0,229,230,5,98,0,0,230,66,
        1,0,0,0,231,232,5,59,0,0,232,68,1,0,0,0,233,234,5,58,0,0,234,70,
        1,0,0,0,235,236,5,44,0,0,236,72,1,0,0,0,237,238,5,91,0,0,238,74,
        1,0,0,0,239,240,5,93,0,0,240,76,1,0,0,0,241,242,5,123,0,0,242,78,
        1,0,0,0,243,244,5,125,0,0,244,80,1,0,0,0,245,246,5,40,0,0,246,82,
        1,0,0,0,247,248,5,41,0,0,248,84,1,0,0,0,10,0,88,98,107,114,118,125,
        137,142,144,2,6,0,0,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    Identifier = 3
    IntLiteral = 4
    FloatLiteral = 5
    BoolLiteral = 6
    StringLiteral = 7
    PlusOperator = 8
    MinusOperator = 9
    StarOperator = 10
    SlashOperator = 11
    GTOperator = 12
    GEOperator = 13
    LTOperator = 14
    LEOperator = 15
    EQOperator = 16
    NEQOperator = 17
    NOTOperator = 18
    AssignmentOperator = 19
    InOperator = 20
    IfKeyword = 21
    LoopKeyword = 22
    WhileKeyword = 23
    FunctionKeyword = 24
    ReturnKeyword = 25
    IntType = 26
    FloatType = 27
    StringType = 28
    BooleanType = 29
    ListType = 30
    GlobalTypeModifier = 31
    Semicolon = 32
    Colon = 33
    Comma = 34
    BracketLeft = 35
    BracketRight = 36
    CurlyLeft = 37
    CurlRight = 38
    ParenLeft = 39
    ParenRight = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", 
            "'!='", "'!'", "'='", "'in'", "'if'", "'lop'", "'while'", "'fun'", 
            "'ret'", "'int'", "'flo'", "'str'", "'bol'", "'lst'", "'glob'", 
            "';'", "':'", "','", "'['", "']'", "'{'", "'}'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
            "BoolLiteral", "StringLiteral", "PlusOperator", "MinusOperator", 
            "StarOperator", "SlashOperator", "GTOperator", "GEOperator", 
            "LTOperator", "LEOperator", "EQOperator", "NEQOperator", "NOTOperator", 
            "AssignmentOperator", "InOperator", "IfKeyword", "LoopKeyword", 
            "WhileKeyword", "FunctionKeyword", "ReturnKeyword", "IntType", 
            "FloatType", "StringType", "BooleanType", "ListType", "GlobalTypeModifier", 
            "Semicolon", "Colon", "Comma", "BracketLeft", "BracketRight", 
            "CurlyLeft", "CurlRight", "ParenLeft", "ParenRight" ]

    ruleNames = [ "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
                  "BoolLiteral", "StringLiteral", "ESC", "SAFECODEPOINT", 
                  "PlusOperator", "MinusOperator", "StarOperator", "SlashOperator", 
                  "GTOperator", "GEOperator", "LTOperator", "LEOperator", 
                  "EQOperator", "NEQOperator", "NOTOperator", "AssignmentOperator", 
                  "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", 
                  "FunctionKeyword", "ReturnKeyword", "IntType", "FloatType", 
                  "StringType", "BooleanType", "ListType", "GlobalTypeModifier", 
                  "Semicolon", "Colon", "Comma", "BracketLeft", "BracketRight", 
                  "CurlyLeft", "CurlRight", "ParenLeft", "ParenRight" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


