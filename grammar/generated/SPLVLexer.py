# Generated from d:/Desktop/SPLV/simple-programming-language-visualiser/grammar/SPLVLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,236,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,4,0,69,8,0,11,0,12,0,70,1,0,1,0,1,1,1,1,1,1,1,1,5,1,79,8,
        1,10,1,12,1,82,9,1,1,1,1,1,1,2,1,2,5,2,88,8,2,10,2,12,2,91,9,2,1,
        3,3,3,94,8,3,1,3,1,3,5,3,98,8,3,10,3,12,3,101,9,3,1,3,3,3,104,8,
        3,1,4,1,4,1,4,5,4,109,8,4,10,4,12,4,112,9,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,3,5,123,8,5,1,6,1,6,1,6,5,6,128,8,6,10,6,12,6,131,
        9,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,154,8,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,3,12,164,8,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,
        209,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,0,17,0,19,8,21,
        9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,
        20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,
        31,1,0,10,3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,8,0,34,34,47,
        47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,0,31,34,34,92,
        92,2,0,43,43,45,45,3,0,37,37,42,42,47,47,254,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,68,1,0,0,
        0,3,74,1,0,0,0,5,85,1,0,0,0,7,103,1,0,0,0,9,105,1,0,0,0,11,122,1,
        0,0,0,13,124,1,0,0,0,15,134,1,0,0,0,17,137,1,0,0,0,19,139,1,0,0,
        0,21,141,1,0,0,0,23,153,1,0,0,0,25,163,1,0,0,0,27,165,1,0,0,0,29,
        167,1,0,0,0,31,169,1,0,0,0,33,172,1,0,0,0,35,175,1,0,0,0,37,179,
        1,0,0,0,39,185,1,0,0,0,41,189,1,0,0,0,43,208,1,0,0,0,45,210,1,0,
        0,0,47,215,1,0,0,0,49,217,1,0,0,0,51,219,1,0,0,0,53,221,1,0,0,0,
        55,224,1,0,0,0,57,226,1,0,0,0,59,228,1,0,0,0,61,230,1,0,0,0,63,232,
        1,0,0,0,65,234,1,0,0,0,67,69,7,0,0,0,68,67,1,0,0,0,69,70,1,0,0,0,
        70,68,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,6,0,0,0,73,2,1,0,
        0,0,74,75,5,47,0,0,75,76,5,47,0,0,76,80,1,0,0,0,77,79,8,1,0,0,78,
        77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,
        0,82,80,1,0,0,0,83,84,6,1,1,0,84,4,1,0,0,0,85,89,7,2,0,0,86,88,7,
        3,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,
        6,1,0,0,0,91,89,1,0,0,0,92,94,5,45,0,0,93,92,1,0,0,0,93,94,1,0,0,
        0,94,95,1,0,0,0,95,99,7,4,0,0,96,98,7,5,0,0,97,96,1,0,0,0,98,101,
        1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,104,1,0,0,0,101,99,1,0,
        0,0,102,104,5,48,0,0,103,93,1,0,0,0,103,102,1,0,0,0,104,8,1,0,0,
        0,105,106,3,7,3,0,106,110,5,46,0,0,107,109,7,5,0,0,108,107,1,0,0,
        0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,10,1,0,0,0,
        112,110,1,0,0,0,113,114,5,116,0,0,114,115,5,114,0,0,115,116,5,117,
        0,0,116,123,5,101,0,0,117,118,5,102,0,0,118,119,5,97,0,0,119,120,
        5,108,0,0,120,121,5,115,0,0,121,123,5,101,0,0,122,113,1,0,0,0,122,
        117,1,0,0,0,123,12,1,0,0,0,124,129,5,34,0,0,125,128,3,15,7,0,126,
        128,3,17,8,0,127,125,1,0,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,
        127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,
        133,5,34,0,0,133,14,1,0,0,0,134,135,5,92,0,0,135,136,7,6,0,0,136,
        16,1,0,0,0,137,138,8,7,0,0,138,18,1,0,0,0,139,140,7,8,0,0,140,20,
        1,0,0,0,141,142,7,9,0,0,142,22,1,0,0,0,143,154,5,62,0,0,144,145,
        5,62,0,0,145,154,5,61,0,0,146,154,5,60,0,0,147,148,5,60,0,0,148,
        154,5,61,0,0,149,150,5,61,0,0,150,154,5,61,0,0,151,152,5,33,0,0,
        152,154,5,61,0,0,153,143,1,0,0,0,153,144,1,0,0,0,153,146,1,0,0,0,
        153,147,1,0,0,0,153,149,1,0,0,0,153,151,1,0,0,0,154,24,1,0,0,0,155,
        156,5,97,0,0,156,157,5,110,0,0,157,164,5,100,0,0,158,159,5,111,0,
        0,159,164,5,114,0,0,160,161,5,120,0,0,161,162,5,111,0,0,162,164,
        5,114,0,0,163,155,1,0,0,0,163,158,1,0,0,0,163,160,1,0,0,0,164,26,
        1,0,0,0,165,166,5,33,0,0,166,28,1,0,0,0,167,168,5,61,0,0,168,30,
        1,0,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,32,1,0,0,0,172,173,
        5,105,0,0,173,174,5,102,0,0,174,34,1,0,0,0,175,176,5,108,0,0,176,
        177,5,111,0,0,177,178,5,112,0,0,178,36,1,0,0,0,179,180,5,119,0,0,
        180,181,5,104,0,0,181,182,5,105,0,0,182,183,5,108,0,0,183,184,5,
        101,0,0,184,38,1,0,0,0,185,186,5,102,0,0,186,187,5,117,0,0,187,188,
        5,110,0,0,188,40,1,0,0,0,189,190,5,114,0,0,190,191,5,101,0,0,191,
        192,5,116,0,0,192,42,1,0,0,0,193,194,5,105,0,0,194,195,5,110,0,0,
        195,209,5,116,0,0,196,197,5,102,0,0,197,198,5,108,0,0,198,209,5,
        111,0,0,199,200,5,115,0,0,200,201,5,116,0,0,201,209,5,114,0,0,202,
        203,5,98,0,0,203,204,5,111,0,0,204,209,5,108,0,0,205,206,5,108,0,
        0,206,207,5,115,0,0,207,209,5,116,0,0,208,193,1,0,0,0,208,196,1,
        0,0,0,208,199,1,0,0,0,208,202,1,0,0,0,208,205,1,0,0,0,209,44,1,0,
        0,0,210,211,5,103,0,0,211,212,5,108,0,0,212,213,5,111,0,0,213,214,
        5,98,0,0,214,46,1,0,0,0,215,216,5,59,0,0,216,48,1,0,0,0,217,218,
        5,58,0,0,218,50,1,0,0,0,219,220,5,44,0,0,220,52,1,0,0,0,221,222,
        5,46,0,0,222,223,5,46,0,0,223,54,1,0,0,0,224,225,5,91,0,0,225,56,
        1,0,0,0,226,227,5,93,0,0,227,58,1,0,0,0,228,229,5,123,0,0,229,60,
        1,0,0,0,230,231,5,125,0,0,231,62,1,0,0,0,232,233,5,40,0,0,233,64,
        1,0,0,0,234,235,5,41,0,0,235,66,1,0,0,0,14,0,70,80,89,93,99,103,
        110,122,127,129,153,163,208,2,6,0,0,0,1,0
    ]

class SPLVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    Comment = 2
    Identifier = 3
    IntLiteral = 4
    FloatLiteral = 5
    BoolLiteral = 6
    StringLiteral = 7
    AdditiveOperator = 8
    MultiplicativeOperator = 9
    ComparisonOperator = 10
    BooleanOperator = 11
    NOTOperator = 12
    AssignmentOperator = 13
    InOperator = 14
    IfKeyword = 15
    LoopKeyword = 16
    WhileKeyword = 17
    FunctionKeyword = 18
    ReturnKeyword = 19
    Type = 20
    GlobalTypeModifier = 21
    Semicolon = 22
    Colon = 23
    Comma = 24
    DoubleDot = 25
    BracketLeft = 26
    BracketRight = 27
    CurlyLeft = 28
    CurlRight = 29
    ParenLeft = 30
    ParenRight = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!'", "'='", "'in'", "'if'", "'lop'", "'while'", "'fun'", "'ret'", 
            "'glob'", "';'", "':'", "','", "'..'", "'['", "']'", "'{'", 
            "'}'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
            "BoolLiteral", "StringLiteral", "AdditiveOperator", "MultiplicativeOperator", 
            "ComparisonOperator", "BooleanOperator", "NOTOperator", "AssignmentOperator", 
            "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", "FunctionKeyword", 
            "ReturnKeyword", "Type", "GlobalTypeModifier", "Semicolon", 
            "Colon", "Comma", "DoubleDot", "BracketLeft", "BracketRight", 
            "CurlyLeft", "CurlRight", "ParenLeft", "ParenRight" ]

    ruleNames = [ "WS", "Comment", "Identifier", "IntLiteral", "FloatLiteral", 
                  "BoolLiteral", "StringLiteral", "ESC", "SAFECODEPOINT", 
                  "AdditiveOperator", "MultiplicativeOperator", "ComparisonOperator", 
                  "BooleanOperator", "NOTOperator", "AssignmentOperator", 
                  "InOperator", "IfKeyword", "LoopKeyword", "WhileKeyword", 
                  "FunctionKeyword", "ReturnKeyword", "Type", "GlobalTypeModifier", 
                  "Semicolon", "Colon", "Comma", "DoubleDot", "BracketLeft", 
                  "BracketRight", "CurlyLeft", "CurlRight", "ParenLeft", 
                  "ParenRight" ]

    grammarFileName = "SPLVLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


